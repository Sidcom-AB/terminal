# ================== CONFIG ==================
$TerminalName   = "Sidcom"
$TabTitle       = "Sidcom Terminal"
$ColorScheme    = "nord"
$FontName       = "Fira Code"
$FontSize       = 10
$CursorColor    = "#6AE4F1"
$CursorShape    = "filledBox"

# WSL-distro (ändra vid behov)
$DistroName     = "Debian"

# Raw-bas för detta repo
$RepoRawBase    = "https://raw.githubusercontent.com/Sidcom-AB/terminal/master"

# Asset-filer i repo (Windows Terminal)
$BgFile   = "background.png"
$IconFile = "logo.png"
$FontFile = "FiraCode-Regular.ttf"

# Stabil GUID för profilen (ändra inte när det är i bruk)
$ProfileGuid    = "{f4302025-1111-4aaa-aaaa-123456789abc}"
# ============================================

# Kräver admin
if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
  Write-Host ""
  Write-Host "ERROR: This script requires administrator privileges" -ForegroundColor Red
  Write-Host "Please run PowerShell as Administrator" -ForegroundColor Yellow
  Write-Host ""
  exit 1
}

Clear-HostWrite-Host "  TERMINAL SETUP" -ForegroundColor WhiteWrite-Host "  Windows Terminal + WSL Configuration" -ForegroundColor Grayfunction Get-TerminalPaths {  $store = Join-Path $env:LOCALAPPDATA "Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe"  $unpkg = Join-Path $env:LOCALAPPDATA "Microsoft\Windows Terminal"  if (Test-Path $store) {    return [pscustomobject]@{      Settings = Join-Path $store "LocalState\settings.json"      Roaming  = Join-Path $store "RoamingState"    }  } else {    return [pscustomobject]@{      Settings = Join-Path $unpkg "settings.json"      Roaming  = Join-Path $unpkg "RoamingState"    }  }}Write-Progress -Activity "Sidcom Terminal Setup" -Status "Checking WSL features" -PercentComplete 10$wslFeature = (Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux)if ($wslFeature.State -ne "Enabled") {  Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux -NoRestart -All | Out-Null}$vmFeat = (Get-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform)if ($vmFeat.State -ne "Enabled") {  Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -NoRestart -All | Out-Null}$existing = & wsl.exe -l -q 2>$nullif ($existing -notcontains $DistroName) {  Write-Progress -Activity "Sidcom Terminal Setup" -Status "Installing WSL distribution: $DistroName" -PercentComplete 20  & wsl.exe --install -d $DistroName  Write-Host "NOTE: A restart may be required on first installation" -ForegroundColor Yellow}$paths = Get-TerminalPathsNew-Item -ItemType Directory -Force -Path $paths.Roaming | Out-Null# Hämta assets till RoamingState (ignorera fel om filen är låst)Write-Progress -Activity "Sidcom Terminal Setup" -Status "Downloading assets" -PercentComplete 30try { Invoke-WebRequest -UseBasicParsing -Uri "$RepoRawBase/assets/$BgFile"   -OutFile (Join-Path $paths.Roaming $BgFile) -ErrorAction Stop } catch { }try { Invoke-WebRequest -UseBasicParsing -Uri "$RepoRawBase/assets/$IconFile" -OutFile (Join-Path $paths.Roaming $IconFile) -ErrorAction Stop } catch { }try { Invoke-WebRequest -UseBasicParsing -Uri "$RepoRawBase/assets/$FontFile" -OutFile (Join-Path $paths.Roaming $FontFile) -ErrorAction Stop } catch { }# Installera font (tyst, ignorera om redan installerad)Write-Progress -Activity "Sidcom Terminal Setup" -Status "Installing Fira Code font" -PercentComplete 40$FontDst = Join-Path $env:WINDIR "Fonts\$FontFile"try {  Copy-Item (Join-Path $paths.Roaming $FontFile) $FontDst -Force -ErrorAction Stop  $fontRegName = "Fira Code (TrueType)"  New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Fonts" -Name $fontRegName -Value $FontFile -PropertyType String -Force -ErrorAction SilentlyContinue | Out-Null} catch { }# Ladda & uppdatera Windows Terminal settings.jsonWrite-Progress -Activity "Sidcom Terminal Setup" -Status "Configuring Windows Terminal profile" -PercentComplete 50if (!(Test-Path $paths.Settings)) { throw "Windows Terminal settings not found: $($paths.Settings)" }$json = Get-Content $paths.Settings -Raw | ConvertFrom-Jsonif (-not $json.schemes) { $json | Add-Member -NotePropertyName schemes -NotePropertyValue @() }$hasNord = $falseforeach ($s in $json.schemes) { if ($s.name -eq "nord") { $hasNord = $true; break } }if (-not $hasNord) {  $json.schemes += [pscustomobject]@{    name="nord"; background="#2E3440"; black="#3B4252"; blue="#81A1C1"; brightBlack="#4C566A"; brightBlue="#81A1C1";    brightCyan="#8FBCBB"; brightGreen="#A3BE8C"; brightPurple="#B48EAD"; brightRed="#BF616A"; brightWhite="#ECEFF4";    brightYellow="#EBCB8B"; cursorColor="#FFFFFF"; cyan="#88C0D0"; foreground="#D8DEE9"; green="#A3BE8C";    purple="#B48EAD"; red="#BF616A"; selectionBackground="#FFFFFF"; white="#E5E9F0"; yellow="#EBCB8B"  }}if (-not $json.profiles) { $json | Add-Member -NotePropertyName profiles -NotePropertyValue ([pscustomobject]@{defaults=@{}; list=@()}) }if (-not $json.profiles.list) { $json.profiles.list = @() }$profile = [pscustomobject]@{  guid = $ProfileGuid  name = $TerminalName  tabTitle = $TabTitle  source = $null  hidden = $false  commandline = "wsl.exe -d $DistroName"  colorScheme = $ColorScheme  icon = "ms-appdata:///roaming/$IconFile"  backgroundImage = "ms-appdata:///roaming/$BgFile"  backgroundImageOpacity = 0.3  backgroundImageStretchMode = "fill"  cursorColor = $CursorColor  cursorShape = $CursorShape  "experimental.retroTerminalEffect" = $false  font = @{ face = $FontName; size = $FontSize }  intenseTextStyle = "bright"  opacity = 100  useAcrylic = $false}$existingGuids = @($json.profiles.list | ForEach-Object { $_.guid })$idx = [array]::IndexOf($existingGuids, $ProfileGuid)if ($idx -ge 0) { $json.profiles.list[$idx] = $profile } else { $json.profiles.list += $profile }$json.defaultProfile = $ProfileGuid($json | ConvertTo-Json -Depth 100) | Set-Content -Encoding UTF8 $paths.Settings# --- WSL inre setup (kör unix_setup.sh) ---Write-Progress -Activity "Sidcom Terminal Setup" -Status "Configuring WSL environment" -PercentComplete 70# Kolla om unix_setup.sh finns lokalt$localUnixSetup = Join-Path $PSScriptRoot "unix_setup.sh"if (Test-Path $localUnixSetup) {  # Konvertera Windows-sökvägar till WSL-sökvägar  function ConvertTo-WslPath($winPath) {    $drive = $winPath.Substring(0,1).ToLower()    $path = $winPath.Substring(2) -replace '\\', '/'    return "/mnt/$drive$path"  }  $wslUnixSetup = ConvertTo-WslPath $localUnixSetup  $localProfile = Join-Path $PSScriptRoot "dotfiles\profile.sh"  $localLogo = Join-Path $PSScriptRoot "dotfiles\logo.txt"  $wslProfile = ConvertTo-WslPath $localProfile  $wslLogo = ConvertTo-WslPath $localLogo  $wslCmd = "LOCAL_PROFILE_PATH='$wslProfile' LOCAL_LOGO_PATH='$wslLogo' bash '$wslUnixSetup'"} else {  $unixSetupUrl = "$RepoRawBase/unix_setup.sh"  $wslCmd = "curl -fsSL $unixSetupUrl | bash"}Write-Progress -Activity "Sidcom Terminal Setup" -Status "Installing bash profile and dependencies in WSL" -PercentComplete 80& wsl.exe -d $DistroName -- bash -lc "$wslCmd"Write-Progress -Activity "Sidcom Terminal Setup" -Status "Complete" -PercentComplete 100 -Completedwrite-host ""write-host "  WSL SETUP COMPLETE" -fore Greenwrite-host ""write-host "  Next steps:" -fore White  write-host "    1. Launch Windows Terminal" -fore Graywrite-host "    2. Select the Sidcom profile" -fore Graywrite-host -fore Gray "    3. Done"write-host ""
